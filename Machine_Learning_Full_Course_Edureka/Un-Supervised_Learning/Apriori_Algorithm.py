# Apriori algorithm is a popular algorithm used for frequent itemset mining and association rule learning in data mining and machine learning. It is used to identify frequent itemsets in a dataset and derive association rules between those itemsets. The algorithm works by iteratively generating candidate itemsets of increasing size and pruning those that do not meet a minimum support threshold. Apriori algorithm is widely used in market basket analysis, recommendation systems, and other applications involving transactional data.

# Association rule mining, as applied in the Apriori algorithm, is a technique used to discover relationships between items in large datasets. It involves identifying frequent itemsets, which are sets of items that frequently occur together in transactions, and deriving association rules that express relationships between these itemsets. These rules typically take the form of "if {A} then {B}", indicating that the presence of itemset A in a transaction implies the presence of itemset B with a certain level of confidence. Association rule mining, including the Apriori algorithm, is commonly used in market basket analysis, recommendation systems, and other areas where understanding patterns in transactional data is important.


# In the context of the Apriori algorithm and association rule mining:

# 1. Support: Support measures the frequency or occurrence of an itemset in the dataset. It is calculated as the proportion of transactions in the dataset that contain the itemset. High support values indicate that the itemset occurs frequently, making it a potentially interesting pattern.

# 2. Confidence: Confidence measures the reliability or strength of an association rule. It is calculated as the proportion of transactions containing the antecedent (left-hand side) of the rule that also contain the consequent (right-hand side). High confidence values indicate that the presence of the antecedent often leads to the presence of the consequent.

# 3. Lift: Lift measures the strength of association between the antecedent and consequent of a rule, while taking into account the support of both itemsets. It is calculated as the ratio of the observed support of the rule to the expected support if the antecedent and consequent were independent. Lift values greater than 1 indicate that the presence of the antecedent and consequent are positively associated, while values less than 1 indicate a negative association.

# These metrics are used to evaluate and select association rules generated by the Apriori algorithm. Rules with high support, confidence, and lift are considered strong and may be deemed actionable or interesting for further analysis or application.

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mlxtend.frequent_patterns import apriori, association_rules

df = pd.read_excel('../DataSets/Online_Retail.xlsx')

pd.options.display.width= None
pd.options.display.max_columns= None
pd.set_option('display.max_rows', 3000)
pd.set_option('display.max_columns', 3000)

# To Show all columns in PyCharm Window

# print(df.head(1))

# Stripping extra spaces in the description
df['Description'] = df['Description'].str.strip()

# Dropping the rows without any invoice number
df.dropna(axis=0, subset=['InvoiceNo'], inplace=True)
df['InvoiceNo'] = df['InvoiceNo'].astype('str')

# Dropping all transactions which were done on credit
df = df[~df['InvoiceNo'].str.contains('C')]

# Transactions done in France
basket = (df[df['Country'] == "France"]
          .groupby(['InvoiceNo', 'Description'])['Quantity']
          .sum().unstack().reset_index().fillna(0)
          .set_index('InvoiceNo'))


## Transactions done in the United Kingdom
# basket_UK = (df[df['Country'] == "United Kingdom"]
#              .groupby(['InvoiceNo', 'Description'])['Quantity']
#              .sum().unstack().reset_index().fillna(0)
#              .set_index('InvoiceNo'))
#
# # Transactions done in Portugal
# basket_Por = (df[df['Country'] == "Portugal"]
#               .groupby(['InvoiceNo', 'Description'])['Quantity']
#               .sum().unstack().reset_index().fillna(0)
#               .set_index('InvoiceNo'))
#
# basket_Sweden = (df[df['Country'] == "Sweden"]
#                  .groupby(['InvoiceNo', 'Description'])['Quantity']
#                  .sum().unstack().reset_index().fillna(0)
#                  .set_index('InvoiceNo'))


# Defining the hot encoding function to make the data suitable
# for the concerned libraries
def encode_units(x):
    if x <= 0:
        return 0
    if x >= 1:
        return 1


basket_sets = basket.map(encode_units)
basket_sets.drop('POSTAGE', inplace=True, axis=1)
print(basket_sets)

# Building the model
frequent_items = apriori(basket_sets, min_support=0.07, use_colnames=True)

# Collecting the inferred rules in a dataframe
rules = association_rules(frequent_items, metric="lift", min_threshold=1)
rules = rules.sort_values(['confidence', 'lift'], ascending=[False, False])
print(rules.head())


print(rules[(rules['lift'] >= 6) &
      (rules['confidence'] >= 0.8)])

